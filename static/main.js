// Generated by CoffeeScript 1.7.1
(function() {
  var initialize;

  initialize = function() {
    console.log(window.httpUrl);
    return $.get(window.httpUrl + 'api/v1/loc', function(data) {
      var customMapType, featureOpts, infowindow, map, mapOptions, marker, myLoc;
      featureOpts = [
        {
          stylers: [
            {
              hue: '#008900'
            }, {
              visibility: 'simplified'
            }, {
              gamma: 0.5
            }, {
              weight: 0.5
            }
          ]
        }, {
          elementType: 'labels',
          stylers: [
            {
              visibility: 'off'
            }
          ]
        }, {
          featureType: 'water',
          stylers: [
            {
              color: '#008900'
            }
          ]
        }
      ];
      mapOptions = {
        zoom: 6,
        center: myLoc = new google.maps.LatLng(data.lat, data.lng),
        mapTypeControlOptions: {
          mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, google.maps.MapTypeId.HYBRID, "Terminator"]
        },
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      console.log(data);
      map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
      customMapType = new google.maps.StyledMapType(featureOpts, {
        name: 'Terminator'
      });
      map.mapTypes.set("Terminator", customMapType);
      marker = new google.maps.Marker({
        position: myLoc,
        map: map,
        title: 'current location'
      });
      infowindow = new google.maps.InfoWindow({
        content: "<div>" + new Date(data.time) + "</div>"
      });
      google.maps.event.addListener(marker, 'click', function() {
        return infowindow.open(map, marker);
      });
      infowindow.open(map, marker);
      return $.get(window.httpUrl + 'api/v1/locSeries', function(data) {
        var buildMatcher, day, matchers, now;
        matchers = [];
        buildMatcher = function(properties, conditional) {
          var collection;
          if (properties == null) {
            properties = {};
          }
          if (conditional == null) {
            conditional = (function() {
              return true;
            });
          }
          collection = [];
          return matchers.push(function(point) {
            var path;
            if (point === "draw") {
              path = new google.maps.Polyline(_.extend({
                path: collection,
                geodesic: true,
                strokeColor: '#ff0000',
                strokeOpacity: 0.7,
                strokeWeight: 2
              }, properties));
              path.setMap(map);
            }
            if (conditional(point)) {
              collection.push(point.loc);
              return true;
            } else {
              return false;
            }
          });
        };
        day = 1000 * 60 * 60 * 24;
        now = new Date().getTime();
        buildMatcher({
          strokeColor: '#ff0000',
          strokeWeight: 2
        }, function(point) {
          return point.time < now - day;
        });
        buildMatcher({
          strokeColor: '#0000ff',
          strokeWeight: 2
        }, function(point) {
          return point.time > now - day;
        });
        data.split('\n').forEach(function(entry) {
          var point;
          if (!entry) {
            return;
          }
          point = JSON.parse(entry);
          point.loc = new google.maps.LatLng(point.lat, point.lng);
          return _.map(matchers, function(matcher) {
            return matcher(point);
          });
        });
        return matchers.forEach(function(matcher) {
          return matcher('draw');
        });
      });
    });
  };

  $('document').ready(initialize);

}).call(this);
