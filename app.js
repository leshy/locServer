// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, async, blab, collections, decorate, decorators, ejs, ejslocals, env, express, fs, helpers, http, init, initCollections, initDb, initExpress, initRoutes, mongodb, path, remotecollections, settings, _;

  fs = require('fs');

  _ = require('underscore');

  Backbone = require('backbone4000');

  async = require('async');

  path = require('path');

  helpers = require('helpers');

  decorators = require('decorators2');

  decorate = decorators.decorate;

  http = require('http');

  mongodb = require('mongodb');

  express = require('express');

  ejs = require('ejs');

  ejslocals = require('ejs-locals');

  collections = require('collections/serverside');

  remotecollections = require('collections-remote/serverside');

  settings = {
    httpport: 3335,
    httpUrl: '/',
    viewsFolder: __dirname + '/views',
    staticFolder: __dirname + '/static'
  };

  settings = _.extend(settings, require('./settings.js').settings);

  env = {
    settings: settings
  };

  initDb = function(callback) {
    env.db = new mongodb.Db('loclog', new mongodb.Server('localhost', 27017), {
      safe: true
    });
    return env.db.open(callback);
  };

  initCollections = function(callback) {
    env.points = new collections.MongoCollection({
      db: env.db,
      collection: 'points'
    });
    env.point = env.points.defineModel('point', {});
    return callback();
  };

  initExpress = function(callback) {
    var app;
    env.app = app = express();
    return app.configure(function() {
      app.engine('ejs', ejslocals);
      app.set('view engine', 'ejs');
      app.set('views', settings.viewsFolder);
      app.use(express["static"](settings.staticFolder, {
        maxAge: 18000
      }));
      app.use(express.bodyParser());
      app.use(express.logger('dev'));
      app.use(app.router);
      app.use(function(err, req, res, next) {
        console.log(err.stack);
        console.log('web request error', err.stack);
        return res.render('error', {
          errorcode: 500,
          errordescription: 'Internal Server Error',
          title: '500'
        });
      });
      env.server = http.createServer(env.app);
      env.server.listen(settings.httpport);
      console.log('http server listening');
      return callback(void 0, true);
    });
  };

  initRoutes = function(callback) {
    env.app.get('/api/v1/loc', function(req, res) {
      return env.points.findModels({}, {
        sort: {
          time: -1
        },
        limit: 1
      }, function(err, data) {
        return res.send(data.attributes);
      });
    });
    return env.app.get('/', function(req, res) {
      return res.render('index.ejs', {
        httpUrl: env.settings.httpUrl
      });
    });
  };

  blab = function(callback) {
    return env.points.findModels({}, {
      sort: {
        time: -1
      },
      limit: 1
    }, (function(err, data) {
      return console.log(err, data.attributes);
    }), callback);
  };

  init = function(callback) {
    return async.auto({
      db: initDb,
      express: initExpress,
      routes: ['express', initRoutes],
      collections: ['db', initCollections],
      blab: ['collections', blab]
    });
  };

  init(function(err, data) {
    if (!err) {
      return console.log('done!');
    } else {
      return console.log('fail!');
    }
  });

}).call(this);
